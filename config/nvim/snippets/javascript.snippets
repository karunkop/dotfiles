# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet imp "import"
import $1 from "${2:${1}}";$0
endsnippet

snippet clo "console.log()"
console.log("$1: ", ${2:${1}});$0
endsnippet

snippet tc "try-catch" b
try {
    $1
} catch(err) {
    $0
}
endsnippet

snippet tcs "try-catch simple" b
try {
    $0
} catch {}
endsnippet

snippet ue "useEffect()" b
useEffect(() => {
    $0
}, [$1]);
endsnippet

snippet us "useState() hook" b
const [$1, set$2] = useState($3);$0
endsnippet

snippet ust "useState(true) hook" b
const [$1, set$2] = useState(true);$0
endsnippet

snippet usf "useState(false) hook" b
const [$1, set$2] = useState(false);$0
endsnippet

snippet usn "useState(null) hook" b
const [$1, set$2] = useState(null);$0
endsnippet

snippet fc "functional component" b
const $1 = (${2:props}) => {
    $0
};
endsnippet

snippet fca "(async) functional component" b
const $1 = async (${2:props}) => {
    $0
};
endsnippet

snippet rfc "react functional component" b
import React from "react";

const $1 = (${2:props}) => {
    return (${0:<div />});
};

export default $1;
endsnippet
